// <auto-generated />
using System;
using Interview.Web.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Interview.Web.Migrations
{
    [DbContext(typeof(Db))]
    partial class DbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Interview.Web.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e014c1b-d4cc-4e05-b346-ede89f513a44"),
                            Description = "Category with dairy products",
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("d4bc694b-b9f3-469c-ae4d-75b41905c4a8"),
                            Description = "Beverage products",
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = new Guid("ecc25b3b-f90d-4d6d-a950-44e8c53f8929"),
                            Description = "Soda drinks",
                            Name = "Soda"
                        });
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.CategoryHierarhy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParentCategoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("CategoryHierarhy");
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductInventoryDescription")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductInventoryLocation")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.InventoryOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Completed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Started")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryOperations");
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MetadataTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetadataTypeId");

                    b.ToTable("Metadatas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21a1c630-fa76-4d90-85fe-a94590975a74"),
                            Description = "Color metadata with blue value",
                            MetadataTypeId = new Guid("3ab03e92-4ebe-4c5e-887d-d7a96e3ffa0b"),
                            Name = "Blue Color metadata",
                            Value = "Blue"
                        },
                        new
                        {
                            Id = new Guid("101944a3-a57a-4336-bb49-0fc130cb9777"),
                            MetadataTypeId = new Guid("86dd6aef-b4d5-4b2e-bb5e-221aa12dc8e3"),
                            Value = "Large"
                        },
                        new
                        {
                            Id = new Guid("2b2e4769-04aa-40d6-bb49-8377350d7b54"),
                            MetadataTypeId = new Guid("479b595b-f4a3-4162-ac57-89897f3a5b95"),
                            Name = "Soda Tonic SKU",
                            Value = "135-009-12123"
                        },
                        new
                        {
                            Id = new Guid("e291a1b4-ef30-4d73-8d4b-5464b52645e3"),
                            MetadataTypeId = new Guid("1db713ec-9c06-472d-bfa9-b08ae0bcb0c7"),
                            Value = "Tonic Guys Inc."
                        },
                        new
                        {
                            Id = new Guid("138cc3b1-7e38-417b-88ea-f93e7821f22d"),
                            MetadataTypeId = new Guid("1db713ec-9c06-472d-bfa9-b08ae0bcb0c7"),
                            Value = "Coca-Cola beverages Inc."
                        });
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.MetadataType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MetadataTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("479b595b-f4a3-4162-ac57-89897f3a5b95"),
                            Name = "SKU"
                        },
                        new
                        {
                            Id = new Guid("3ab03e92-4ebe-4c5e-887d-d7a96e3ffa0b"),
                            Name = "Color"
                        },
                        new
                        {
                            Id = new Guid("86dd6aef-b4d5-4b2e-bb5e-221aa12dc8e3"),
                            Name = "Size"
                        },
                        new
                        {
                            Id = new Guid("1db713ec-9c06-472d-bfa9-b08ae0bcb0c7"),
                            Name = "Manufacturer"
                        });
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbd829e7-6251-4724-97bd-76b3c2427e7a"),
                            Description = "Medium bottle of tonic Soda from Tonic Guys. High level of carbonation",
                            Name = "Tonic Soda",
                            UnitId = new Guid("07eba7d1-32df-4ce8-8174-a799894bb7d3")
                        },
                        new
                        {
                            Id = new Guid("9192ddf4-5d38-4873-9412-008c43f6c057"),
                            Description = "Medium bottle of cherry coke from Coca-Cola.",
                            Name = "Cherry Coke",
                            UnitId = new Guid("07eba7d1-32df-4ce8-8174-a799894bb7d3")
                        });
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07eba7d1-32df-4ce8-8174-a799894bb7d3"),
                            Description = "20 Fl Oz bottle",
                            DisplayName = "20 Fl Oz",
                            Name = "20 Fl Oz bottle"
                        },
                        new
                        {
                            Id = new Guid("87dc6e3c-705c-4cb5-8383-1c0585153aa5"),
                            Description = "50 Fl Oz bottle",
                            DisplayName = "50 Fl Oz",
                            Name = "50 Fl Oz bottle"
                        });
                });

            modelBuilder.Entity("ProductsCategories", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductsCategories");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("fbd829e7-6251-4724-97bd-76b3c2427e7a"),
                            CategoryId = new Guid("d4bc694b-b9f3-469c-ae4d-75b41905c4a8")
                        },
                        new
                        {
                            ProductId = new Guid("fbd829e7-6251-4724-97bd-76b3c2427e7a"),
                            CategoryId = new Guid("ecc25b3b-f90d-4d6d-a950-44e8c53f8929")
                        },
                        new
                        {
                            ProductId = new Guid("9192ddf4-5d38-4873-9412-008c43f6c057"),
                            CategoryId = new Guid("d4bc694b-b9f3-469c-ae4d-75b41905c4a8")
                        });
                });

            modelBuilder.Entity("ProductsMetadatas", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId", "MetadataId");

                    b.HasIndex("MetadataId");

                    b.ToTable("ProductsMetadatas");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("fbd829e7-6251-4724-97bd-76b3c2427e7a"),
                            MetadataId = new Guid("2b2e4769-04aa-40d6-bb49-8377350d7b54")
                        },
                        new
                        {
                            ProductId = new Guid("fbd829e7-6251-4724-97bd-76b3c2427e7a"),
                            MetadataId = new Guid("e291a1b4-ef30-4d73-8d4b-5464b52645e3")
                        },
                        new
                        {
                            ProductId = new Guid("9192ddf4-5d38-4873-9412-008c43f6c057"),
                            MetadataId = new Guid("138cc3b1-7e38-417b-88ea-f93e7821f22d")
                        });
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.CategoryHierarhy", b =>
                {
                    b.HasOne("Interview.Web.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Web.Domain.Entities.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("Interview.Web.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.InventoryOperation", b =>
                {
                    b.HasOne("Interview.Web.Domain.Entities.Inventory", "Inventory")
                        .WithMany("InventoryOperations")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.Metadata", b =>
                {
                    b.HasOne("Interview.Web.Domain.Entities.MetadataType", "MetadataType")
                        .WithMany()
                        .HasForeignKey("MetadataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetadataType");
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.Product", b =>
                {
                    b.HasOne("Interview.Web.Domain.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ProductsCategories", b =>
                {
                    b.HasOne("Interview.Web.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Web.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsMetadatas", b =>
                {
                    b.HasOne("Interview.Web.Domain.Entities.Metadata", null)
                        .WithMany()
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Web.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Interview.Web.Domain.Entities.Inventory", b =>
                {
                    b.Navigation("InventoryOperations");
                });
#pragma warning restore 612, 618
        }
    }
}
